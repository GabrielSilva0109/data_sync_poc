# Script de teste para o Data Sync PoC

Write-Host "üß™ Testando Data Sync PoC" -ForegroundColor Green
Write-Host "=========================" -ForegroundColor Green

Write-Host "`n1. Testando Health Check..." -ForegroundColor Cyan
try {
    $health = Invoke-WebRequest -Uri "http://localhost:3000/health" -UseBasicParsing
    $healthData = $health.Content | ConvertFrom-Json
    Write-Host "‚úÖ Health Check OK: $($healthData.service) - $($healthData.timestamp)" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Health Check FALHOU: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
}

Write-Host "`n2. Testando valida√ß√µes..." -ForegroundColor Cyan

# Teste com dados inv√°lidos - nome vazio
Write-Host "   2.1 Testando nome vazio..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/users" -Method POST -Body '{"name":"","email":"test@email.com"}' -ContentType "application/json" -UseBasicParsing
    Write-Host "‚ùå Deveria ter falhado com nome vazio" -ForegroundColor Red
} catch {
    $errorContent = $_.ErrorDetails.Message | ConvertFrom-Json
    Write-Host "   ‚úÖ Valida√ß√£o OK: $($errorContent.error)" -ForegroundColor Green
}

# Teste com email inv√°lido
Write-Host "   2.2 Testando email inv√°lido..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000/users" -Method POST -Body '{"name":"Jo√£o","email":"email-invalido"}' -ContentType "application/json" -UseBasicParsing
    Write-Host "‚ùå Deveria ter falhado com email inv√°lido" -ForegroundColor Red
} catch {
    $errorContent = $_.ErrorDetails.Message | ConvertFrom-Json
    Write-Host "   ‚úÖ Valida√ß√£o OK: $($errorContent.error)" -ForegroundColor Green
}

Write-Host "`n3. Testando cria√ß√£o de usu√°rios v√°lidos..." -ForegroundColor Cyan

$usuarios = @(
    @{name="Ana Silva"; email="ana@email.com"},
    @{name="Carlos Santos"; email="carlos@empresa.com.br"},
    @{name="Maria Oliveira"; email="maria.oliveira@gmail.com"}
)

$contador = 1
foreach ($usuario in $usuarios) {
    Write-Host "   3.$contador Criando usu√°rio: $($usuario.name) - $($usuario.email)" -ForegroundColor Yellow
    try {
        $body = @{
            name = $usuario.name
            email = $usuario.email
        } | ConvertTo-Json
        
        $response = Invoke-WebRequest -Uri "http://localhost:3000/users" -Method POST -Body $body -ContentType "application/json" -UseBasicParsing
        $responseData = $response.Content | ConvertFrom-Json
        Write-Host "   ‚úÖ Usu√°rio criado: $($responseData.user.name) - $($responseData.user.email)" -ForegroundColor Green
        Write-Host "   üì§ Evento simulado para: $($responseData.simulatedEvent.eventBusName)" -ForegroundColor Blue
    } catch {
        Write-Host "   ‚ùå Erro ao criar usu√°rio: $($_.Exception.Message)" -ForegroundColor Red
    }
    $contador++
}

Write-Host "`n‚úÖ Todos os testes conclu√≠dos!" -ForegroundColor Green
Write-Host "`nüìã Resumo do que est√° funcionando:" -ForegroundColor White
Write-Host "   ‚Ä¢ ‚úÖ Health check endpoint" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Valida√ß√£o de nome obrigat√≥rio" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Valida√ß√£o de formato de email" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Cria√ß√£o de usu√°rios com dados v√°lidos" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Simula√ß√£o de eventos para EventBridge" -ForegroundColor Green
Write-Host "   ‚Ä¢ ‚úÖ Logs estruturados" -ForegroundColor Green

Write-Host "`nüîß Para ver logs em tempo real:" -ForegroundColor Cyan
Write-Host "   docker-compose logs -f user-service" -ForegroundColor White

Write-Host "`nüöÄ Projeto funcionando corretamente!" -ForegroundColor Green